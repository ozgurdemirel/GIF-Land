name: Build and Release (macOS + Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-ffmpeg-silicon:
    runs-on: macos-14  # macos-14 is M1/ARM64, macos-13 is Intel
    steps:
      - uses: actions/checkout@v4
      - name: Verify Architecture
        run: |
          echo "Runner architecture: $(uname -m)"
          echo "Should be 'arm64' for Apple Silicon"
          if [ "$(uname -m)" != "arm64" ]; then
            echo "ERROR: Not running on ARM64/Apple Silicon!"
            exit 1
          fi
      - name: Install build dependencies
        run: |
          # Install required tools for FFmpeg build
          brew install pkg-config nasm yasm automake autoconf libtool
          # Verify tools
          echo "Verifying installed tools..."
          which git make strip otool pkg-config nasm yasm automake autoconf
      - name: Build Static FFmpeg for Mac Silicon
        run: |
          chmod +x ./scripts/build/build-ffmpeg-static.sh
          ./scripts/build/build-ffmpeg-static.sh

          # Just ensure it's executable and clean
          echo "üìù Preparing FFmpeg binary..."
          chmod +x composeApp/src/jvmMain/resources/native/macos/ffmpeg
          # Remove any extended attributes from build process
          xattr -cr composeApp/src/jvmMain/resources/native/macos/ffmpeg 2>/dev/null || true

          # Verify architecture
          echo "‚úÖ FFmpeg info:"
          file composeApp/src/jvmMain/resources/native/macos/ffmpeg
      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-mac-silicon
          path: composeApp/src/jvmMain/resources/native/macos/ffmpeg
          retention-days: 7

  macos-silicon:
    needs: build-ffmpeg-silicon
    runs-on: macos-14  # macos-14 is M1/ARM64, macos-13 is Intel
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download FFmpeg artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-mac-silicon
          path: composeApp/src/jvmMain/resources/native/macos/
      - name: Verify FFmpeg and Architecture
        run: |
          echo "Runner architecture: $(uname -m)"
          echo "FFmpeg info:"
          file composeApp/src/jvmMain/resources/native/macos/ffmpeg || echo "FFmpeg not found"

          # Make it executable and clean
          chmod +x composeApp/src/jvmMain/resources/native/macos/ffmpeg
          # Note: Signing will happen at runtime on the user's machine
          echo "‚ÑπÔ∏è  FFmpeg will be signed locally when first run"
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: 'aarch64'
      - name: Build macOS DMG
        run: |
          chmod +x ./scripts/**/*.sh
          # FFmpeg already exists from artifact, just build DMG
          ./scripts/package/create-full-package.sh --skip-ffmpeg-build
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: webp-recorder-mac-silicon
          path: composeApp/build/compose/binaries/main/dmg/webp-recorder-mac-silicon.dmg

  macos-intel:
    runs-on: macos-13  # Use macos-13 for Intel runners
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: 'x64'  # Intel architecture
      - name: Build macOS Intel DMG
        run: |
          chmod +x ./scripts/**/*.sh
          ./scripts/package/create-full-package-mac-intel.sh
      - name: Upload macOS Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: webp-recorder-mac-intel
          path: composeApp/build/compose/binaries/main/dmg/webp-recorder-mac-intel.dmg

  windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Install WiX Toolset (for MSI packaging)
        shell: powershell
        run: |
          choco install wixtoolset --no-progress -y
          $wixBin = "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin"
          if (Test-Path $wixBin) { echo "$wixBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
      - name: Enable Git-Bash and tools
        shell: bash
        run: |
          git config --global core.autocrlf input || true
      - name: Build Windows MSI
        shell: bash
        run: |
          chmod +x ./scripts/**/*.sh || true
          ./scripts/package/create-full-package-windows.sh
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: webp-recorder-windows
          path: composeApp/build/compose/binaries/main/msi/webp-recorder-windows.msi

  release:
    needs: [macos-silicon, macos-intel, windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/webp-recorder-mac-silicon/**
            dist/webp-recorder-mac-intel/**
            dist/webp-recorder-windows/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}